{
  "name": "BlowfishJ",
  "tagline": "Implementation of Blowfish for Java",
  "body": " \r\n# BlowfishJ v2.16\r\n\r\nThis is a fork of the BlowfishJ project on SourceForge, that you may find here:\r\n\r\nhttps://sourceforge.net/projects/blowfishj/\r\n\r\n## What is BlowfishJ?\r\n\r\nThis is my own implementation of the Blowfish encryption algorithm in ECB and CBC mode. It's a simple to use package and runs at an excellent speed, around 40 Mb/s with the Hotspot Server VM of the JDK 1.4 on a P4/1700. The code actually comes very close to the limits what is possible with Java. The latest JDK it was tested on is 1.4.2_05-b04. Stream and string encryption solutions are compatible to Blowfish.NET (a C# implementation), allowing an easy data exchange between Java and the Microsoft.NET platform.\r\n\r\nNext to the original sources this software also includes streaming classes originally contributed by Dale Anson <danson@germane-software.com>.\r\n\r\nFor one of the real world application using BlowfishJ please check out John's Zaurus JCryptPad at \r\n\r\nhttp://www.wallacesoftware.com/zaurus/\r\n    \r\nThanks to Siegfried Goeschl <siegfried.goeschl@it20one.at> BlowfishJ became an official project at Sourceforge and is buildable via Maven/Ant. You can find our project at:\r\n\r\nhttp://blowfishj.sf.net/\r\n\r\n \r\n## Copyright and warranty\r\n\r\nThis software is open source, which means that you can use it in your own applets and applications without any license fees. The license model chosen is the Apache License 2.0, for more information check out the file LICENSE.TXT. Additionally to that it would be appreciated that the usage is mentioned somewhere in the documentation and that feedback is sent back to the author, yet both is optional and not a must.\r\n\r\n\r\n## Version history \r\n\r\n### 2.16\r\n\r\n- using Git/GitHub instead of CVS/SourceForge\r\n- upgraded to Maven 2.x\r\n- upgraded to JUnit 4.12\r\n- little refactorings\r\n\r\n### 2.15\r\n\r\n- removed unused local variables, which were detected by the JDK 1.5 compiler\r\n- streams can now be closed multiple times without causing problems\r\n- some copyright/comment and demo code adjustments\r\n- verified to compile and run in the new Eclipse 3.1 IDE\r\n\r\n### 2.14\r\n\r\n- root package names changed to (test.)net.sourceforge.blowfishj\r\n- project is now hosted at Sourceforge, see above\r\n- updated to Apache License 2.0\r\n- added Maven build\r\n\r\n### 2.13\r\n\r\n- fixed a bug in the key setup of BlowfishECB, if keys were passed with an offset and they were smaller than Blowfish.BLOCKSIZE then the overall 56 byte key used was wrongfully assembled; a test case was added to prove the fix\r\n\r\n### 2.12\r\n\r\n- switch to Apache/BSD license (BlowfishJ is now a candidate for Jakarta)\r\n- deprecated constructor in BlowfishSimple, introduced a better solution using the full Unicode data (be aware that the constructors are _not_ compatible!)\r\n- added known weak key test\r\n- added demo code for BlowfishEasy\r\n- added compatibility tests for data exchange with Blowfish.NET\r\n- removed the C++ sources (this project fell behind its expectations)\r\n\r\n### 2.11\r\n\r\n- added comments for each deprecated item\r\n- added BUILD.BAT for auto-generation of docs, jar and class files (Win32 only)\r\n- some bugs in the Javadoc comments\r\n\r\n### 2.10\r\n\r\n- instances (of ECB and CBC) can be reused by invoking initialize()\r\n- added a JUnit test suite\r\n- renamed BlowfishTest to BlowfishTest) and moved it to the test package\r\n- moved InOutputStreamTest to the test package\r\n- renamed SHA1Test to SHA1Demo and moved it to the test package \r\n- changed the benchmark to CBC/bytes encryption (closer to the real world)\r\n- refactored the streams (e.g. deprecated the string consuming ctors)\r\n- problem with streams: zero length content generated incompatible output\r\n- bug with input stream: IV reading could fail for no reason\r\n- renamed some methods in BinConverter (their names simply didn't make sense)\r\n- general code cleanup and some minor speedups (yet outside of the hot spots)\r\n\r\n### 2.02\r\n\r\n- added Eclipse 2.1 project files\r\n- removed deprecated method calls and obsolete imports\r\n- reformatted all Java source code (e.g. to fit print margins)\r\n- BlowfishJ is now published under the LGPL\r\n\r\n### 2.01\r\n\r\n- problem BlowfishCBC, only the first block got decrypted (wrong block swaps)\r\n- BinConverter.binHexToBytes was flawed\r\n\r\n### 2.00\r\n\r\n- speed optimized the byte array handling methods (since they are the most commonly used), which gained around 50% more performance(!); both ECB and CBC classes now have separated inner loops for maximum speed\r\n- all methods with array parameters have now new versions with offset and length parameters (where necessary), solves lots of data copying overhead for the caller\r\n- also deprecated all of these old methods with array parameters\r\n- extended and cleaned up BinConverter\r\n- BlowfishEasy is now using the standard Java SHA-1 implementation\r\n- fixed message input in BlowfishTest (length adjustment)\r\n\r\n### 1.86\r\n\r\n- added BlowfishJ implementation in C++\r\n- decryption was referencing the box members, not the references on the stack, which lead to a decrease in performance\r\n\r\n### 1.85\r\n\r\n(first entry)\r\n\r\n\r\n--\r\nCopyright (c) 1997-2016 Markus Hahn <mhahn@cruzio.com>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}